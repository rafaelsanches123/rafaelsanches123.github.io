I"}<p><img src="http://localhost:4000/assets/tesseract-ocr-e-python.jpg" alt="python-ocr-pytesseract" style="width: 100%" /></p>

<p>Fala pessoal blz? Nesse post, vou ensinar para vocês um pouco sobre uma tecnologia poderosíssima que podemos utilizar com <strong>python</strong> para extrair textos de dentro de imagens. Essa tecnologia é geralmente conhecida como <strong>OCR</strong>! Mas o que seria um OCR?</p>

<p>Optical Character Recognition (<strong>OCR</strong>) é uma tecnologia para reconhecer caracteres a partir de um arquivo de imagem. Então, por meio do OCR é possível obter um arquivo de texto editável por um computador.</p>

<p>Para conseguirmos realizar essa proeza, vamos precisar então de ter em nossa máquina uma ferramenta de OCR e nesse caso, a escolhida para ser utilizada nesse post será o Tesseract.</p>

<p>O Tesseract foi originalmente desenvolvido na <strong>Hewlett-Packard</strong> (HP) Laboratories Bristol e na HP Co, Greeley Colorado, entre os anos de 1985 à 1994. Em 1996 foi portado para Windows e em 2005 o Tesseract foi liberado a comunidade pela HP e desde 2006 é então desenvolvido pela gigante <strong>Google</strong>. Se a curiosidade bater, de uma olhada em seu repositório no <a href="https://github.com/tesseract-ocr/tesseract">github</a>.</p>

<p>O Tesseract por natureza é uma aplicação de terminal e a sua API disponibilizada para desenvolvimento é a <strong>libtesseract</strong> possui suporte apenas para as linguagens C/C++. Para conseguirmos utilizar essa ferramenta com python, nós utilizaremos uma biblioteca chamada <strong>pytesseract</strong>. Escolhida neste post por sua facilidade e alta abstração de funções disponibilizadas dentro do Tesseract.
Sua grande vantagem é que trabalha com argumentos do tipo <strong>Python Image Library</strong> (PIL). O suporte ao PIL possibilita a compatibilidade a todos os formatos de imagem suportados como os formatos jpeg, png, gif, bmp, tiff entre outros. Além disso, ela aceita uma grande variedade de extensões nativamente não suportadas no tesseract que por natureza aceita somente os formatos tiff e bmp.</p>

<p>Nesse post vamos realizar todo processo utilizando o sistema operacional linux com a distro Ubuntu na versão 18.04 e python 3.</p>

<h2 id="instalando-tesseract-no-ubuntu">Instalando tesseract no Ubuntu</h2>

<p>Primeiro vamos começar pela instalação do <strong>Tesseract OCR</strong>. Abra o terminal e digite o seguinte comando:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt-get install tesseract-ocr tesseract-ocr-por
</code></pre></div></div>

<h2 id="instalando-as-bibliotecas-a-serem-utilizadas-com-o-python">Instalando as bibliotecas a serem utilizadas com o python</h2>

<p>Antes de começar a instalar as bibliotecas, recomendo fortemente que leia o artigo sobre ambientes virtuais. Essa leitura é recomendada porque vai te ajudar bastante em questão de organização de projetos <a href="/criacao-de-um-ambiente-virtual-em-python">link para o artigo</a>. Obs: se você estiver seguindo esse post sem utilizar um ambiente virtual, será importante trocar os comandos <strong>pip</strong> por <strong>pip3</strong>.</p>

<p>Instalação da <strong>biblioteca Pillow</strong>. Abra o terminal e digite o seguinte comando:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install pillow
</code></pre></div></div>
<p>Instalação da <strong>biblioteca Pytesseract</strong>. Abra o terminal e digite o seguinte comando:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install pytesseract
</code></pre></div></div>

<p>Agora, abra seu editor de código ou IDE favorito e crie o arquivo python-ocr.py e salve dentro de algum diretório. No mesmo diretório salve a imagem a seguir com o nome <strong>teste-com-python-ocr</strong> e use extensão <strong>jpg</strong>.</p>

<p><img src="http://localhost:4000/assets/imagem-teste-com-ocr.jpg" alt="imagem-de-exemplo-para-teste" style="width: 100%" /></p>

<p>Agora, depois de ter baixado a imagem para o mesmo diretório do seu código python, precisamos codificar nosso exemplo. Abra o arquivo .py que você criou e digite:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="c1"># Importando o módulo Pillow (Manipulação de Imagens) para abrir a imagem no script
</span><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="c1"># Módulo para a utilização da tecnologia OCR
</span><span class="kn">import</span> <span class="nn">pytesseract</span>
<span class="c1"># Extraindo o texto da imagem
</span><span class="k">print</span><span class="p">(</span> <span class="n">pytesseract</span><span class="p">.</span><span class="n">image_to_string</span><span class="p">(</span> <span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'teste-com-python-ocr.jpg'</span><span class="p">),</span> <span class="n">lang</span><span class="o">=</span><span class="s">'por'</span><span class="p">)</span> <span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Agora, abra seu terminal dentro do diretório onde se encontra seu código .py e a imagem que baixou e digite o seguinte comando:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Se estiver dentro do ambiente virtual use:
python python-ocr.py

Se não estiver utilizando ambiente virtual use:
python3 python-ocr.py
</code></pre></div></div>

<p>Resultado gerado:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 PÁGINA

TRADUÇÃO

Português - Inglês
</code></pre></div></div>

<p>Simples não é mesmo? Vale ressaltar que nem sempre o texto resultante é 100% correto, a tecnologia OCR depende muito da qualidade da imagem e da quantidade de detalhes que a mesma possui. Para tentar corrigir esses possiveis problemas, existem algumas técnicas usadas para fazer melhorias na imagem diminuindo a chance de erros na hora da extração em um outro post tentarei falar mais sobre essas abordagens de correção.</p>
:ET