---
layout: post
title:  "Curso de Ruby - Vari√°veis e Tipos de Dados"
date:   2025-03-11 15:55:02 -0300
categories: ruby
---

![Ruby]({{ site.url }}/assets/ruby.png){:style="width: 100%" }


## **Vari√°veis em Ruby**
Ruby √© uma linguagem **dinamicamente tipada**, o que significa que voc√™ **n√£o** precisa declarar o tipo da vari√°vel. O interpretador infere automaticamente.  

```ruby
nome = "Rafael"   # String
idade = 30        # Integer
altura = 1.75     # Float
maior_idade = true   # Boolean

puts nome   # Rafael
puts idade  # 30
puts altura # 1.75
puts maior_idade # true
```

---

##  **Conven√ß√µes de Nomea√ß√£o de Vari√°veis**
No Ruby, existem diferentes tipos de vari√°veis com regras espec√≠ficas:  

| Tipo de Vari√°vel | Exemplo | Descri√ß√£o |
|------------------|---------|-----------|
| **Vari√°vel Local** | `nome = "Rafael"` | Come√ßa com **letra min√∫scula** ou `_`, acess√≠vel apenas no escopo onde foi definida. |
| **Vari√°vel de Inst√¢ncia** | `@idade = 30` | Come√ßa com `@`, usada dentro de **classes** para armazenar valores do objeto. |
| **Vari√°vel de Classe** | `@@contagem = 0` | Come√ßa com `@@`, usada para armazenar valores compartilhados entre todos os objetos da classe. |
| **Vari√°vel Global** | `$pi = 3.14` | Come√ßa com `$`, pode ser acessada de qualquer lugar (‚ö†Ô∏è Evite usar muito). |
| **Constante** | `PI = 3.14` | Come√ßa com **letra mai√∫scula**, n√£o pode ser alterada (mas Ruby permite um aviso se modificar). |

Exemplo:  
```ruby
nome = "Jo√£o"  # Vari√°vel local
@idade = 25     # Vari√°vel de inst√¢ncia
@@contador = 10 # Vari√°vel de classe
$versao = "1.0" # Vari√°vel global
PI = 3.14       # Constante

puts nome
puts @idade
puts @@contador
puts $versao
puts PI
```

---

## **Tipos de Dados**
### ‚úÖ **Strings (`String`)**
```ruby
nome = "Rafael"
puts nome.upcase    # "RAFAEL"
puts nome.downcase  # "rafael"
puts nome.length    # 6
puts "Ol√°, #{nome}!"  # Interpola√ß√£o de string
```

### ‚úÖ **N√∫meros Inteiros (`Integer`)**
```ruby
idade = 30
puts idade.class  # Integer
puts idade.next   # 31
puts idade.to_f   # Converte para float
```

### ‚úÖ **N√∫meros Decimais (`Float`)**
```ruby
altura = 1.75
puts altura.round(1) # Arredonda para 1 casa decimal
puts altura.to_i     # Converte para inteiro
```

### ‚úÖ **Booleanos (`true` e `false`)**
```ruby
ligado = true
desligado = false
puts ligado && desligado  # false
puts ligado || desligado  # true
puts !ligado              # false (nega√ß√£o)
```

### ‚úÖ **Arrays (`Array`)**
```ruby
numeros = [1, 2, 3, 4, 5]
puts numeros[0]  # Primeiro elemento -> 1
puts numeros.last # √öltimo elemento -> 5

numeros.push(6)   # Adiciona elemento
puts numeros.inspect  # [1, 2, 3, 4, 5, 6]
```

### ‚úÖ **Dicion√°rios (`Hash`)**
```ruby
pessoa = { nome: "Rafael", idade: 30 }
puts pessoa[:nome]  # Rafael
pessoa[:altura] = 1.75  # Adicionando novo dado
puts pessoa.inspect
```

---

## **Convers√£o de Tipos**
### üîÑ **Convertemos valores com `.to_s`, `.to_i`, `.to_f`, `.to_a`, etc.**
```ruby
num = "42"
puts num.to_i   # Converte para inteiro -> 42

decimal = 3.14
puts decimal.to_s  # Converte para string -> "3.14"

lista = "1,2,3".split(",")  # ["1", "2", "3"]
puts lista.inspect
```

---

## **Exerc√≠cios**
Agora, pratique resolvendo estes desafios:  
1Ô∏è‚É£ Crie uma vari√°vel `nome` e atribua seu nome a ela. Em seguida, exiba `"Ol√°, [nome]!"`.  
2Ô∏è‚É£ Crie uma vari√°vel e atribua a ela um n√∫mero em formato de string e depois converta-o para inteiro. Multiplique por 2 e exiba o resultado.  
3Ô∏è‚É£ Crie um `Hash` para armazenar **nome, idade e cidade** de uma pessoa e exiba as informa√ß√µes.

**Se quiser, tente resolver e envie nos coment√°rios suas respostas para analisarmos juntos!** üöÄ

**Pr√≥xima aula em constru√ß√£o!!! - Sa√≠da e Entrada de Dados**