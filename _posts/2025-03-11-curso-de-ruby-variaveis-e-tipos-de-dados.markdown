---
layout: post
title:  "Curso de Ruby - Vari√°veis e Tipos de Dados"
date:   2025-03-11 15:55:02 -0300
categories: ruby
---

![Ruby]({{ site.url }}/assets/ruby.png){:style="width: 100%" }


## **Vari√°veis em Ruby**
Ruby √© uma linguagem **dinamicamente tipada**, o que significa que voc√™ **n√£o** precisa declarar o tipo da vari√°vel. O interpretador infere automaticamente.  

```ruby
nome = "Rafael"   # String
idade = 30        # Integer
altura = 1.75     # Float
maior_idade = true   # Boolean

puts nome   # Rafael
puts idade  # 30
puts altura # 1.75
puts maior_idade # true
```

---

##  **Conven√ß√µes de Nomea√ß√£o de Vari√°veis**
No Ruby, existem diferentes tipos de vari√°veis com regras espec√≠ficas:  

| Tipo de Vari√°vel | Exemplo | Descri√ß√£o |
|------------------|---------|-----------|
| **Vari√°vel Local** | `nome = "Rafael"` | Come√ßa com **letra min√∫scula** ou `_`, acess√≠vel apenas no escopo onde foi definida. |
| **Vari√°vel de Inst√¢ncia** | `@idade = 30` | Come√ßa com `@`, usada dentro de **classes** para armazenar valores do objeto. |
| **Vari√°vel de Classe** | `@@contagem = 0` | Come√ßa com `@@`, usada para armazenar valores compartilhados entre todos os objetos da classe. |
| **Vari√°vel Global** | `$pi = 3.14` | Come√ßa com `$`, pode ser acessada de qualquer lugar (‚ö†Ô∏è Evite usar muito). |
| **Constante** | `PI = 3.14` | Come√ßa com **letra mai√∫scula**, n√£o pode ser alterada (mas Ruby permite um aviso se modificar). |

Exemplo:  
```ruby
nome = "Jo√£o"  # Vari√°vel local
$versao = "1.0" # Vari√°vel global
PI = 3.14       # Constante

puts nome
puts $versao
puts PI
```

No Ruby, existem dois tipos principais de vari√°veis que s√£o cruciais para entender a programa√ß√£o orientada a objetos: __vari√°veis de inst√¢ncia__ e __vari√°veis de classe__. Compreender a diferen√ßa entre elas √© fundamental para escrever c√≥digo Ruby eficaz. 

**Nesse momento n√£o se preocupe pois vamos nos aprofundar nesse assunto no post referente a Orienta√ß√£o a Objetos em Ruby no decorrer do nosso curso**.

**Vari√°veis de Inst√¢ncia (@)**
- **Defini√ß√£o**: Vari√°veis de inst√¢ncia s√£o espec√≠ficas para cada objeto (inst√¢ncia) de uma classe. Cada vez que voc√™ cria um novo objeto a partir de uma classe, esse objeto ter√° seu pr√≥prio conjunto de vari√°veis de inst√¢ncia.
- **Escopo**: O escopo de uma vari√°vel de inst√¢ncia √© limitado ao objeto individual ao qual ela pertence. Isso significa que o valor de uma vari√°vel de inst√¢ncia pode ser diferente para cada objeto da mesma classe.
- **Declara√ß√£o**: Vari√°veis de inst√¢ncia s√£o declaradas usando um √∫nico caractere @ antes do nome da vari√°vel (por exemplo, @nome, @idade).
- **Uso**: Elas s√£o usadas para armazenar informa√ß√µes que s√£o √∫nicas para cada objeto. Pense nelas como os atributos de um objeto.
- **Exemplo**: Imagine uma classe Cachorro. Cada cachorro tem um nome e uma ra√ßa diferentes.  @nome e @raca seriam vari√°veis de inst√¢ncia porque cada objeto Cachorro teria seu pr√≥prio nome e ra√ßa.

**Vari√°veis de Classe (@@)**:
- **Defini√ß√£o**: Vari√°veis de classe pertencem √† pr√≥pria classe e s√£o compartilhadas por todos os objetos (inst√¢ncias) dessa classe. Existe apenas uma c√≥pia de uma vari√°vel de classe, que √© compartilhada por todas as inst√¢ncias da classe e at√© mesmo por subclasses.
- **Escopo**: O escopo de uma vari√°vel de classe √© a classe e todas as suas inst√¢ncias. Se voc√™ modificar o valor de uma vari√°vel de classe, a altera√ß√£o ser√° refletida em todos os objetos daquela classe.
- **Declara√ß√£o**: Vari√°veis de classe s√£o declaradas usando dois caracteres @@ antes do nome da vari√°vel (por exemplo, @@numero_de_cachorros).
- **Uso**: Elas s√£o usadas para armazenar informa√ß√µes que s√£o comuns a todos os objetos de uma classe, ou para rastrear informa√ß√µes sobre a pr√≥pria classe.
- **Exemplo**: Usando a classe Cachorro novamente, voc√™ poderia ter uma vari√°vel de classe @@total_cachorros para rastrear o n√∫mero total de objetos Cachorro que foram criados. Cada vez que um novo objeto Cachorro √© criado, voc√™ poderia incrementar @@total_cachorros. Este valor seria compartilhado por todos os objetos Cachorro.

Em resumo:

| Caracter√≠stica   | Vari√°vel de Inst√¢ncia (@)            | Vari√°vel de Classe (@@)                             |
|------------------|--------------------------------------|-----------------------------------------------------|
| A quem pertence  | Objeto (inst√¢ncia)                   | Classe                                              |
| Compartilhamento | N√£o compartilhado (√∫nico por objeto) | Compartilhado por todos os objetos e subclasses     |
| Uso principal    | Atributos √∫nicos do objeto           | Informa√ß√µes comuns √† classe, rastreamento de classe |
| Declara√ß√£o       | @nome_variavel                       | @@nome_variavel                                     |

Exemplo:  
```ruby
class Cachorro
  @@total_cachorros = 0 # Vari√°vel de classe para rastrear o n√∫mero total de cachorros

  def initialize(nome, raca)
    @nome = nome         # Vari√°vel de inst√¢ncia para o nome do cachorro
    @raca = raca         # Vari√°vel de inst√¢ncia para a ra√ßa do cachorro
    @@total_cachorros += 1 # Incrementa a vari√°vel de classe cada vez que um cachorro √© criado
  end

  # M√©todo para acessar a vari√°vel de inst√¢ncia @nome
  def nome_cachorro
    @nome
  end

  # M√©todo para acessar a vari√°vel de inst√¢ncia @raca
  def raca_cachorro
    @raca
  end

  # M√©todo de classe para acessar a vari√°vel de classe @@total_cachorros
  def self.total_cachorros
    @@total_cachorros
  end

  # M√©todo para exibir informa√ß√µes do cachorro, incluindo vari√°veis de inst√¢ncia e de classe
  def exibir_info
    puts "Nome do cachorro: #{@nome}"
    puts "Ra√ßa do cachorro: #{@raca}"
    puts "Total de cachorros criados at√© agora: #{@@total_cachorros}"
    puts "---"
  end
end

cachorro1 = Cachorro.new("Rex", "Labrador") # Criando inst√¢ncias da classe Cachorro (objetos cachorro)
cachorro1.exibir_info # Exibindo informa√ß√µes de cada cachorro
cachorro2 = Cachorro.new("Nina", "Poodle") 
cachorro2.exibir_info
cachorro3 = Cachorro.new("Max", "Bulldog")
cachorro3.exibir_info

# Exibindo o total de cachorros usando o m√©todo de classe
puts "N√∫mero total de cachorros criados (acessado diretamente da classe): #{Cachorro.total_cachorros}"
```

---

## **Tipos de Dados**
### ‚úÖ **Strings (`String`)**
```ruby
nome = "Rafael"
puts nome.upcase    # "RAFAEL"
puts nome.downcase  # "rafael"
puts nome.length    # 6
puts "Ol√°, #{nome}!"  # Interpola√ß√£o de string
```

### ‚úÖ **N√∫meros Inteiros (`Integer`)**
```ruby
idade = 30
puts idade.class  # Integer
puts idade.next   # 31
puts idade.to_f   # Converte para float
```

### ‚úÖ **N√∫meros Decimais (`Float`)**
```ruby
altura = 1.75
puts altura.round(1) # Arredonda para 1 casa decimal
puts altura.to_i     # Converte para inteiro
```

### ‚úÖ **Booleanos (`true` e `false`)**
```ruby
ligado = true
desligado = false
puts ligado && desligado  # false
puts ligado || desligado  # true
puts !ligado              # false (nega√ß√£o)
```

### ‚úÖ **Arrays (`Array`)**
```ruby
numeros = [1, 2, 3, 4, 5]
puts numeros[0]  # Primeiro elemento -> 1
puts numeros.last # √öltimo elemento -> 5

numeros.push(6)   # Adiciona elemento
puts numeros.inspect  # [1, 2, 3, 4, 5, 6]
```

### ‚úÖ **Dicion√°rios (`Hash`)**
```ruby
pessoa = { nome: "Rafael", idade: 30 }
puts pessoa[:nome]  # Rafael
pessoa[:altura] = 1.75  # Adicionando novo dado
puts pessoa.inspect
```

---

## **Convers√£o de Tipos**
### üîÑ **Convertemos valores com `.to_s`, `.to_i`, `.to_f`, `.to_a`, etc.**
```ruby
num = "42"
puts num.to_i   # Converte para inteiro -> 42

decimal = 3.14
puts decimal.to_s  # Converte para string -> "3.14"

lista = "1,2,3".split(",")  # ["1", "2", "3"]
puts lista.inspect
```

---

## **Exerc√≠cios**
Agora, pratique resolvendo estes desafios:  
1Ô∏è‚É£ Crie uma vari√°vel `nome` e atribua seu nome a ela. Em seguida, exiba `"Ol√°, [nome]!"`.  
2Ô∏è‚É£ Crie uma vari√°vel e atribua a ela um n√∫mero em formato de string e depois converta-o para inteiro. Multiplique por 2 e exiba o resultado.  
3Ô∏è‚É£ Crie um `Hash` para armazenar **nome, idade e cidade** de uma pessoa e exiba as informa√ß√µes.

**Se quiser, tente resolver e envie nos coment√°rios seus c√≥digos e suas respostas para analisarmos juntos!** üöÄ

**Pr√≥xima aula - [Sa√≠da e Entrada de Dados]({% link  _posts/2025-03-13-curso-de-ruby-saida-e-entrada-de-dados.markdown %})**
