---
layout: post
title:  "Curso de Ruby - M√©todos (Fun√ß√µes)"
date:   2025-03-16 10:45:02 -0300
categories: ruby
---

![Ruby]({{ site.url }}/assets/ruby.png){:style="width: 100%" }

## **O que s√£o M√©todos?**

M√©todos s√£o blocos de c√≥digo reutiliz√°veis que realizam **uma tarefa espec√≠fica**.  

Eles ajudam a **organizar e reutilizar c√≥digo**.  

```ruby
def saudacao
  puts "Ol√°, seja bem-vindo!"
end

saudacao  # Chamando o m√©todo
```
**Sa√≠da:**  
```
Ol√°, seja bem-vindo!
```

---

## **M√©todos com Par√¢metros**
Podemos passar **valores (par√¢metros)** para personalizar o m√©todo.  

```ruby
def saudacao(nome)
  puts "Ol√°, #{nome}!"
end

saudacao("Rafael")
saudacao("Maria")
```
**Sa√≠da:**  
```
Ol√°, Rafael!
Ol√°, Maria!
```

---

## **M√©todos com Retorno (`return`)**
O `return` permite que o m√©todo **devolva um valor**.  

```ruby
def soma(a, b)
  return a + b
end

resultado = soma(5, 3)
puts "O resultado √© #{resultado}"
```
**Sa√≠da:**  
```
O resultado √© 8
```

‚ÑπÔ∏è **Dica:** Em Ruby, o `return` √© opcional, pois um m√©todo **retorna automaticamente o √∫ltimo valor calculado**.  
```ruby
def soma(a, b)
  a + b  # Retorno impl√≠cito
end
```

---

## **Par√¢metros Opcionais**
Podemos definir **valores padr√£o** para os par√¢metros.  

```ruby
def saudacao(nome = "Visitante")
  puts "Ol√°, #{nome}!"
end

saudacao       # Usa o valor padr√£o
saudacao("Ana") # Usa o valor passado
```
**Sa√≠da:**  
```
Ol√°, Visitante!
Ol√°, Ana!
```

---

## **M√©todos com V√°rios Argumentos (`*args`)**
Podemos usar `*args` para passar **um n√∫mero vari√°vel de argumentos**.  

```ruby
def soma(*numeros)
  numeros.sum
end

puts soma(1, 2, 3, 4)  # Soma 1+2+3+4 = 10
puts soma(10, 20)      # Soma 10+20 = 30
```
**Sa√≠da:**  
```
10
30
```

---

## **M√©todos como Express√µes (`lambda` e `proc`)**
Em Ruby, podemos criar fun√ß√µes an√¥nimas com `lambda` ou `proc`.  

### **Exemplo com `lambda`**
```ruby
multiplica = ->(a, b) { a * b }
puts multiplica.call(3, 4)
```
**Sa√≠da:**  
```
12
```

### **Exemplo com `proc`**
```ruby
soma = Proc.new { |a, b| a + b }
puts soma.call(5, 2)
```
**Sa√≠da:**  
```
7
```

---

## **Exerc√≠cios**
Agora √© sua vez! üí™  

1. **Crie um m√©todo** que recebe um n√∫mero e retorna se ele √© **par ou √≠mpar**.  
2. **Escreva um m√©todo** que recebe um nome e imprime `"Ol√°, [nome]!"`, mas se n√£o for passado nenhum nome, ele deve exibir `"Ol√°, Visitante!"`.  
3. **Crie um m√©todo** que recebe **v√°rios n√∫meros** e retorna a **soma deles**.  
4. Crie um programa que liste para o usu√°rio as seguintes op√ß√µes na tela: 1 - soma, 2 - subtra√ß√£o, 3 - multiplica√ß√£o, 4 - divis√£o e 5 - Sair. Capture a op√ß√£o (entrada) desejada pelo usu√°rio e em seguida de acordo com a op√ß√£o desejada implemente uma fun√ß√£o que solicite 2 n√∫meros para cada op√ß√£o que ele escolher e retorne o resultado do primeiro n√∫mero com o segundo n√∫mero da op√ß√£o escolhida na tela. Quando o usu√°rio digitar a op√ß√£o 5 o seu programa precisa ser finalizado e parar a execu√ß√£o.

**Se quiser, tente resolver e envie nos coment√°rios seus c√≥digos e suas respostas para analisarmos juntos!** üöÄ

**Pr√≥xima aula em constru√ß√£o!!! - Manipula√ß√£o de Strings**