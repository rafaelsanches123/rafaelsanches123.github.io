---
layout: post
title:  "Curso de Ruby - Estruturas de Repeti√ß√£o (loops)"
date:   2025-03-15 10:45:02 -0300
categories: ruby
---

![Ruby]({{ site.url }}/assets/ruby.png){:style="width: 100%" }

## **`while` (Enquanto a condi√ß√£o for verdadeira)**
O loop `while` executa um bloco de c√≥digo **enquanto a condi√ß√£o for verdadeira**.  

```ruby
contador = 1

while contador <= 5
  puts "N√∫mero: #{contador}"
  contador += 1
end
```
**Sa√≠da:**  
```
N√∫mero: 1
N√∫mero: 2
N√∫mero: 3
N√∫mero: 4
N√∫mero: 5
```

---

## **`until` (Enquanto a condi√ß√£o for falsa)**
O `until` √© o oposto do `while`: **ele executa enquanto a condi√ß√£o for falsa**.  

```ruby
contador = 1

until contador > 5
  puts "N√∫mero: #{contador}"
  contador += 1
end
```
**Sa√≠da:** (igual ao `while`)  
```
N√∫mero: 1
N√∫mero: 2
N√∫mero: 3
N√∫mero: 4
N√∫mero: 5
```

---

## **`for` (Loop com Intervalo Espec√≠fico)**
O `for` √© √∫til para percorrer um **intervalo de valores** ou **arrays**.  

```ruby
for i in 1..5
  puts "N√∫mero: #{i}"
end
```
**Sa√≠da:**  
```
N√∫mero: 1
N√∫mero: 2
N√∫mero: 3
N√∫mero: 4
N√∫mero: 5
```

---

## **`.times` (Executa um bloco v√°rias vezes)**
O m√©todo `.times` repete um bloco **um n√∫mero fixo de vezes**.  

```ruby
5.times do |i|
  puts "Executando pela #{i + 1}¬™ vez"
end
```
**Sa√≠da:**  
```
Executando pela 1¬™ vez
Executando pela 2¬™ vez
Executando pela 3¬™ vez
Executando pela 4¬™ vez
Executando pela 5¬™ vez
```

---

## **`loop do` (Loop Infinito)**
O `loop do` cria um **loop infinito** (s√≥ para quando usamos `break`).  

```ruby
contador = 1

loop do
  puts "N√∫mero: #{contador}"
  contador += 1
  break if contador > 5
end
```
**Sa√≠da:**  
```
N√∫mero: 1
N√∫mero: 2
N√∫mero: 3
N√∫mero: 4
N√∫mero: 5
```

---

## **`each` (Percorrer Arrays e Hashes)**
O `.each` √© muito usado para percorrer **arrays e hashes**.  

### **Percorrendo um Array**
```ruby
numeros = [1, 2, 3, 4, 5]

numeros.each do |num|
  puts "N√∫mero: #{num}"
end
```

### **Percorrendo um Hash**
```ruby
pessoa = { nome: "Rafael", idade: 30 }

pessoa.each do |chave, valor|
  puts "#{chave}: #{valor}"
end
```
**Sa√≠da:**  
```
nome: Rafael
idade: 30
```

---

## **Controlando Loops (`break` e `next`)**
### **`break` (Interrompe o Loop)**
```ruby
10.times do |i|
  break if i == 5
  puts i
end
```
**Sa√≠da:**  
```
0
1
2
3
4
```

### **`next` (Pula para a Pr√≥xima Itera√ß√£o)**
```ruby
10.times do |i|
  next if i.even? # Pula n√∫meros pares
  puts i
end
```
**Sa√≠da:**  
```
1
3
5
7
9
```

---

## **Exerc√≠cios**

Agora √© sua vez! üí™  

1Ô∏è‚É£ Escreva um programa que imprima os n√∫meros de **1 a 10** usando `while`.  
2Ô∏è‚É£ Crie um loop que pe√ßa um n√∫mero ao usu√°rio **at√© que ele digite 0**. Depois digitar **0** o loop deve terminar.  
3Ô∏è‚É£ Crie um **array de n√∫meros** inteiros, percorra-o com `.each` e exiba apenas os n√∫meros **pares**.

**Se quiser, tente resolver e envie nos coment√°rios seus c√≥digos e suas respostas para analisarmos juntos!** üöÄ

**Pr√≥xima aula em constru√ß√£o!!! - [M√©todos (Fun√ß√µes)]({% link _posts/2025-03-16-curso-de-ruby-metodos-e-funcoes.markdown %})**
