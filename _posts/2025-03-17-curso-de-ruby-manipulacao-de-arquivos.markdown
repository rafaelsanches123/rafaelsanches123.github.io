---
layout: post
title:  "Curso de Ruby - Manipula√ß√£o de Arquivos"
date:   2025-03-17 09:45:02 -0300
categories: ruby
---

![Ruby]({{ site.url }}/assets/ruby.png){:style="width: 100%" }

A manipula√ß√£o de arquivos √© uma tarefa comum e importante em qualquer linguagem de programa√ß√£o. Ruby oferece uma maneira simples e poderosa de trabalhar com arquivos, permitindo abrir, ler, escrever e fechar arquivos facilmente.

---

##  **Abrindo Arquivos**

### Abertura de Arquivo com `File.open`

A maneira mais comum de trabalhar com arquivos em Ruby √© utilizando o m√©todo `File.open`. Ele permite abrir um arquivo em diferentes modos (leitura, escrita, etc.) e realizar opera√ß√µes nele.

A sintaxe b√°sica √©:

```ruby
file = File.open("caminho/do/arquivo", "modo")
```

Onde:
- `"caminho/do/arquivo"` √© o caminho do arquivo.
- `"modo"` define como voc√™ vai interagir com o arquivo (veremos os modos abaixo).

---

##  **Modos de Abertura de Arquivo**

Os principais modos de abertura de arquivos s√£o:

- **`"r"`**: Leitura (leitura simples do arquivo).
- **`"w"`**: Escrita (cria um novo arquivo ou sobrescreve um arquivo existente).
- **`"a"`**: Adi√ß√£o (abre o arquivo para adicionar conte√∫do no final).
- **`"r+"`**: Leitura e escrita (abre o arquivo para leitura e escrita).
- **`"w+"`**: Leitura e escrita (cria um novo arquivo ou sobrescreve um existente).

---

### Exemplo 1: Abrindo um Arquivo para Leitura
```ruby
file = File.open("exemplo.txt", "r")
conteudo = file.read
puts conteudo
file.close
```

 **Sa√≠da**: O conte√∫do do arquivo `exemplo.txt` ser√° impresso no console.

### Detalhes:
- `file.read` l√™ todo o conte√∫do do arquivo.
- `file.close` fecha o arquivo ap√≥s a opera√ß√£o.

---

### Exemplo 2: Abrindo um Arquivo para Escrita
```ruby
file = File.open("exemplo.txt", "w")
file.puts "Ol√°, mundo!"
file.close
```

 **Sa√≠da**: O arquivo `exemplo.txt` ser√° criado (ou sobrescrito) com o conte√∫do "Ol√°, mundo!".

### Detalhes:
- O m√©todo `file.puts` escreve uma linha no arquivo.
- Se o arquivo j√° existir, ele ser√° **sobrescrito**.

---

### Exemplo 3: Abrindo um Arquivo para Adicionar Conte√∫do
```ruby
file = File.open("exemplo.txt", "a")
file.puts "Mais uma linha."
file.close
```

 **Sa√≠da**: O conte√∫do "Mais uma linha." ser√° adicionado ao final do arquivo `exemplo.txt`.

---

##  **Leitura de Arquivo Linha por Linha**

Se voc√™ deseja ler um arquivo linha por linha, pode usar o m√©todo `each_line`.

### Exemplo 4: Lendo Linha por Linha
```ruby
file = File.open("exemplo.txt", "r")
file.each_line do |linha|
  puts linha
end
file.close
```

 **Sa√≠da**: Cada linha do arquivo ser√° impressa no console.

### Detalhes:
- `each_line` itera sobre cada linha do arquivo, permitindo processar linha por linha.

---

##  **Trabalhando com Arquivos Usando `File.read` e `File.write`**

Em vez de abrir o arquivo explicitamente, voc√™ pode usar os m√©todos de leitura e escrita diretamente.

### Exemplo 5: Usando `File.read` para Ler Todo o Conte√∫do
```ruby
conteudo = File.read("exemplo.txt")
puts conteudo
```

 **Sa√≠da**: O conte√∫do do arquivo ser√° impresso no console.

### Exemplo 6: Usando `File.write` para Escrever no Arquivo
```ruby
File.write("exemplo.txt", "Nova linha no arquivo.")
```

 **Sa√≠da**: O arquivo `exemplo.txt` ser√° sobrescrito com o conte√∫do "Nova linha no arquivo."

---

##  **Verificando se um Arquivo Existe**

Antes de tentar abrir um arquivo, √© importante verificar se ele existe para evitar erros.

### Exemplo 7: Verificando Exist√™ncia de Arquivo
```ruby
if File.exist?("exemplo.txt")
  puts "O arquivo existe."
else
  puts "O arquivo n√£o existe."
end
```

 **Sa√≠da**: Ser√° impresso se o arquivo `exemplo.txt` existe ou n√£o no diret√≥rio atual.

### Detalhes:
- O m√©todo `File.exist?` retorna `true` se o arquivo existir, caso contr√°rio, retorna `false`.

---

##  **Removendo um Arquivo**

Se voc√™ deseja excluir um arquivo, pode usar o m√©todo `File.delete`.

### Exemplo 8: Deletando um Arquivo
```ruby
File.delete("exemplo.txt") if File.exist?("exemplo.txt")
```

 **Sa√≠da**: O arquivo `exemplo.txt` ser√° removido, se existir.

### Detalhes:
- `File.delete` exclui o arquivo do sistema.
- Verifique sempre se o arquivo existe antes de exclu√≠-lo para evitar erros.

---

##  **Criando Diret√≥rios**

Al√©m de manipular arquivos, voc√™ pode criar diret√≥rios usando o m√©todo `Dir.mkdir`.

### Exemplo 9: Criando um Diret√≥rio
```ruby
Dir.mkdir("novo_diretorio") unless Dir.exist?("novo_diretorio")
```

 **Sa√≠da**: Ser√° criado o diret√≥rio `novo_diretorio`, caso ele ainda n√£o exista.

### Detalhes:
- `Dir.mkdir` cria um diret√≥rio.
- `Dir.exist?` verifica se um diret√≥rio j√° existe.

---

##  **Trabalhando com Arquivos Tempor√°rios**

Ruby tamb√©m permite trabalhar com arquivos tempor√°rios de maneira simples. Para isso, usamos a classe `Tempfile`.

### Exemplo 10: Criando e Usando um Arquivo Tempor√°rio
```ruby
require 'tempfile'

tempfile = Tempfile.new('exemplo')
tempfile.puts "Este √© um arquivo tempor√°rio"
tempfile.rewind  # Volta para o in√≠cio do arquivo
puts tempfile.read  # L√™ o conte√∫do
tempfile.close  # Fecha o arquivo tempor√°rio
tempfile.unlink  # Remove o arquivo tempor√°rio
```

 **Sa√≠da:**
```
Este √© um arquivo tempor√°rio
```

### Detalhes:
- `Tempfile.new('prefixo')` cria um arquivo tempor√°rio.
- `tempfile.close` e `tempfile.unlink` garantem que o arquivo seja fechado e exclu√≠do ap√≥s o uso.

---

##  **Exerc√≠cio**
Agora √© sua vez! üí™

1Ô∏è‚É£ Crie um programa que leia um arquivo de texto e conte quantas linhas ele possui.  
2Ô∏è‚É£ Crie um programa que abra um arquivo para escrita, adicione 5 linhas nele e depois leia o conte√∫do.  
3Ô∏è‚É£ Crie um arquivo tempor√°rio, escreva algo nele, leia e imprima seu conte√∫do, e depois exclua o arquivo.

---

**Se quiser, tente resolver e envie nos coment√°rios seus c√≥digos e suas respostas para analisarmos juntos!** üöÄ

**Pr√≥xima aula - [Tratamento de Exce√ß√µes]({% link _posts/2025-03-17-curso-de-ruby-tratamento-de-excecoes.markdown %})**