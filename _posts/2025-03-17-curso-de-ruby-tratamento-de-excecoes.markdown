---
layout: post
title:  "Curso de Ruby - Tratamento de Exce√ß√µes"
date:   2025-03-17 10:45:02 -0300
categories: ruby
---

![Ruby]({{ site.url }}/assets/ruby.png){:style="width: 100%" }

O tratamento de erros √© fundamental para garantir que seu programa lide com situa√ß√µes inesperadas de forma controlada, sem travar.

##  **O que s√£o Exce√ß√µes?**
Exce√ß√µes s√£o **erros** que ocorrem durante a execu√ß√£o do programa. Quando uma exce√ß√£o √© levantada (ou seja, ocorre um erro), ela interrompe o fluxo normal do programa. No entanto, podemos **capturar** essas exce√ß√µes e trat√°-las de maneira adequada para evitar que o programa falhe.

---

##  **Como Funciona o Tratamento de Exce√ß√µes em Ruby?**
Ruby utiliza os blocos `begin`, `rescue`, `else`, e `ensure` para tratar erros. A estrutura b√°sica de tratamento de exce√ß√µes √©:

```ruby
begin
  # C√≥digo que pode gerar erro
rescue TipoDeErro => e
  # C√≥digo que trata o erro
else
  # C√≥digo que √© executado se n√£o houver erro
ensure
  # C√≥digo que √© sempre executado, independentemente de erro
end
```

### Componentes:

- **`begin`**: Inicia o bloco de c√≥digo onde o erro pode ocorrer.
- **`rescue`**: Captura o erro e permite trat√°-lo.
- **`else`**: (Opcional) Executado se **nenhum erro** ocorrer no bloco `begin`.
- **`ensure`**: (Opcional) Executado **sempre**, independentemente de erro ou n√£o.

---

##  **Exemplo B√°sico de Tratamento de Exce√ß√£o**

### Exemplo 1: Capturando Exce√ß√µes
```ruby
begin
  puts "Tentando dividir por zero..."
  resultado = 10 / 0
rescue ZeroDivisionError => e
  puts "Erro: #{e.class} - #{e.message}"
end
```

 **Sa√≠da:**
```
Tentando dividir por zero...
Erro: ZeroDivisionError - divided by 0
```

### Detalhes:
- Quando o erro `ZeroDivisionError` ocorre, o c√≥digo dentro de `rescue` √© executado.
- O objeto `e` cont√©m informa√ß√µes sobre o erro, como `e.class` (tipo de erro) e `e.message` (mensagem do erro).

---

##  **Capturando M√∫ltiplos Tipos de Erros**
Voc√™ pode capturar diferentes tipos de erros em um √∫nico bloco `rescue`:

### Exemplo 2: Capturando m√∫ltiplos erros
```ruby
begin
  puts "Tentando acessar um arquivo..."
  file = File.open("arquivo_inexistente.txt")
rescue ZeroDivisionError => e
  puts "Erro de divis√£o: #{e.message}"
rescue IOError => e
  puts "Erro de arquivo: #{e.message}"
end
```

 **Sa√≠da:**  
```
Erro de arquivo: No such file or directory @ rb_sysopen - arquivo_inexistente.txt
```

### Detalhes:
- O bloco `rescue` pode ser usado para capturar m√∫ltiplos tipos de erros, cada um com seu pr√≥prio tratamento.
- **`ZeroDivisionError`** e **`IOError`** s√£o exemplos de diferentes tipos de exce√ß√µes que podemos capturar e tratar separadamente.

---

##  **Bloco `else`**
O bloco `else` √© executado apenas **se nenhum erro ocorrer** no bloco `begin`.

### Exemplo 3: Usando `else`
```ruby
begin
  puts "Tentando realizar uma opera√ß√£o..."
  resultado = 10 / 2
rescue ZeroDivisionError => e
  puts "Erro: #{e.message}"
else
  puts "Opera√ß√£o bem-sucedida! Resultado: #{resultado}"
end
```

 **Sa√≠da:**
```
Tentando realizar uma opera√ß√£o...
Opera√ß√£o bem-sucedida! Resultado: 5
```

### Detalhes:
- Se o c√≥digo dentro de `begin` n√£o gerar erro, o bloco `else` √© executado.

---

##  **Bloco `ensure`**
O bloco `ensure` √© executado **sempre**, independentemente de erro ou n√£o. Isso √© √∫til quando voc√™ precisa garantir que um certo c√≥digo seja executado, como o fechamento de arquivos ou a libera√ß√£o de recursos.

### Exemplo 4: Usando `ensure`
```ruby
begin
  puts "Abrindo arquivo..."
  file = File.open("arquivo.txt", "w")
  file.puts "Escrevendo no arquivo"
rescue IOError => e
  puts "Erro de arquivo: #{e.message}"
ensure
  puts "Fechando arquivo..."
  file.close if file
end
```

 **Sa√≠da:**
```
Abrindo arquivo...
Fechando arquivo...
```

### Detalhes:
- O c√≥digo dentro de `ensure` sempre ser√° executado, mesmo que ocorra um erro no bloco `begin`.

---

##  **Levantando Exce√ß√µes Manualmente**
Em Ruby, voc√™ tamb√©m pode **levantar exce√ß√µes manualmente** usando a palavra-chave `raise`.

### Exemplo 5: Levantando uma Exce√ß√£o
```ruby
def dividir(a, b)
  raise "Divis√£o por zero n√£o permitida" if b == 0
  a / b
end

begin
  puts dividir(10, 0)
rescue => e
  puts "Erro: #{e.message}"
end
```

 **Sa√≠da:**
```
Erro: Divis√£o por zero n√£o permitida
```

### Detalhes:
- A fun√ß√£o `dividir` lan√ßa uma exce√ß√£o com a mensagem "Divis√£o por zero n√£o permitida" se o divisor for zero.

---

##  **Exce√ß√µes Personalizadas**
Voc√™ tamb√©m pode **criar suas pr√≥prias exce√ß√µes** definindo novas classes de erro.

### Exemplo 6: Exce√ß√µes Personalizadas
```ruby
class MeuErro < StandardError; end

def fazer_algo
  raise MeuErro, "Algo deu errado!"
end

begin
  fazer_algo
rescue MeuErro => e
  puts "Erro personalizado: #{e.message}"
end
```

 **Sa√≠da:**
```
Erro personalizado: Algo deu errado!
```

### Detalhes:
- Criamos uma classe de erro personalizada (`MeuErro`) que herda de `StandardError`.
- Agora podemos lan√ßar e capturar exce√ß√µes desse tipo em nosso c√≥digo.

---

##  **Resumo e Boas Pr√°ticas**
- **Use `begin` e `rescue`** para capturar exce√ß√µes e garantir que seu programa n√£o quebre com erros inesperados.
- **Evite capturar erros gen√©ricos** como `rescue => e`, a menos que seja realmente necess√°rio. Prefira capturar erros espec√≠ficos.
- **Use `ensure`** para garantir que recursos (como arquivos ou conex√µes) sejam sempre fechados, independentemente de erros.
- **Levante exce√ß√µes** quando voc√™ precisar sinalizar que algo deu errado no seu c√≥digo, especialmente em m√©todos.

---

##  **Exerc√≠cio**
Agora √© sua vez! üí™

1Ô∏è‚É£ Crie um m√©todo que recebe um n√∫mero e tenta dividi-lo por outro n√∫mero. Se o divisor for 0, levante uma exce√ß√£o personalizada informando que a divis√£o por zero n√£o √© permitida.  
2Ô∏è‚É£ Escreva um programa que tenta abrir um arquivo e, caso o arquivo n√£o exista, mostre uma mensagem de erro. Certifique-se de sempre fechar o arquivo no bloco `ensure`.

**Se quiser, tente resolver e envie nos coment√°rios seus c√≥digos e suas respostas para analisarmos juntos!** üöÄ

**Pr√≥xima aula em constru√ß√£o!!! - Classes e Objetos (POO em Ruby)**