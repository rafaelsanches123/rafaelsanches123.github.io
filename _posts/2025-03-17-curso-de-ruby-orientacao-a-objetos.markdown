---
layout: post
title:  "Curso de Ruby - Programa√ß√£o Orientada a Objetos em Ruby"
date:   2025-03-17 15:00:00 -0300
categories: ruby
---

![Ruby]({{ site.url }}/assets/ruby.png){:style="width: 100%" }

Nesse post vamos aprender sobre **Classes e Objetos** em Ruby, que s√£o os pilares da **Programa√ß√£o Orientada a Objetos (POO)**. Ruby √© uma linguagem completamente orientada a objetos, o que significa que tudo em Ruby √© um objeto, incluindo n√∫meros e at√© mesmo classes.

---

##  **O que √© uma Classe?**
Uma **classe** √© como um **modelo** ou **plano de constru√ß√£o** para criar objetos. Uma classe define as propriedades e comportamentos (m√©todos) que os objetos dessa classe ter√£o. Ela pode ser vista como um molde, enquanto os objetos s√£o as inst√¢ncias dessa classe.

### Sintaxe B√°sica para Definir uma Classe
```ruby
class NomeDaClasse
  # Definindo atributos (vari√°veis de inst√¢ncia)
  def initialize(parametros)
    @atributo1 = parametros
  end

  # M√©todos (comportamentos) da classe
  def nome_do_metodo
    # c√≥digo
  end
end
```

- **`initialize`** √© um m√©todo especial chamado **construtor**. Ele √© chamado automaticamente sempre que uma nova inst√¢ncia da classe √© criada. Os par√¢metros passados para `initialize` s√£o usados para inicializar os atributos do objeto.

---

##  **Definindo uma Classe e Criando um Objeto**
Vamos ver um exemplo b√°sico de como criar uma classe e instanciar um objeto dessa classe.

### Exemplo 1: Definindo uma Classe Simples
```ruby
class Pessoa
  def initialize(nome, idade)
    @nome = nome
    @idade = idade
  end

  def saudacao
    "Ol√°, meu nome √© #{@nome} e eu tenho #{@idade} anos."
  end
end

# Criando um objeto (inst√¢ncia) da classe Pessoa
pessoa1 = Pessoa.new("Jo√£o", 30)
puts pessoa1.saudacao  # Sa√≠da: Ol√°, meu nome √© Jo√£o e eu tenho 30 anos.
```

### Detalhes:
- **`initialize`** define como o objeto ser√° inicializado.
- **`@nome` e `@idade`** s√£o **vari√°veis de inst√¢ncia**. Elas s√£o exclusivas de cada inst√¢ncia (objeto) da classe.
- **`Pessoa.new("Jo√£o", 30)`** cria um novo objeto da classe `Pessoa`.

---

##  **Atributos e M√©todos**
Dentro de uma classe, voc√™ pode ter atributos e m√©todos.

- **Atributos** s√£o vari√°veis que armazenam dados dentro de um objeto.
- **M√©todos** s√£o fun√ß√µes que definem o comportamento de um objeto.

### Atributos de Leitura e Escrita
Para tornar um atributo acess√≠vel (ler ou modificar seu valor) de fora da classe, voc√™ pode usar os m√©todos **getter** e **setter**.

- **Getter**: M√©todo para acessar um atributo.
- **Setter**: M√©todo para modificar um atributo.

### Exemplo 2: Atributos Getter e Setter
```ruby
class Carro
  def initialize(modelo, cor)
    @modelo = modelo
    @cor = cor
  end

  # Getter e Setter para o modelo
  def modelo
    @modelo
  end

  def modelo=(novo_modelo)
    @modelo = novo_modelo
  end

  # Getter e Setter para a cor
  def cor
    @cor
  end

  def cor=(nova_cor)
    @cor = nova_cor
  end
end

# Criando um objeto da classe Carro
carro1 = Carro.new("Fusca", "azul")
puts carro1.modelo  # Sa√≠da: Fusca
puts carro1.cor     # Sa√≠da: azul

# Alterando os atributos
carro1.modelo = "Civic"
carro1.cor = "preto"

puts carro1.modelo  # Sa√≠da: Civic
puts carro1.cor     # Sa√≠da: preto
```

---

##  **M√©todos de Classe**
Al√©m dos m√©todos de inst√¢ncia (que pertencem a objetos), podemos criar **m√©todos de classe**, que pertencem √† pr√≥pria classe e n√£o a inst√¢ncias espec√≠ficas.

### Exemplo 3: M√©todo de Classe
```ruby
class Matematica
  def self.somar(a, b)
    a + b
  end
end

# Chamando o m√©todo de classe
puts Matematica.somar(5, 3)  # Sa√≠da: 8
```

- **`self.somar`** define um **m√©todo de classe**. O `self` se refere √† pr√≥pria classe `Matematica` e n√£o a um objeto espec√≠fico.

---

##  **Heran√ßa**
A **heran√ßa** √© um conceito central da POO onde uma classe pode herdar comportamentos e atributos de outra classe. Isso permite criar novas classes baseadas em classes existentes, sem duplicar c√≥digo.

### Exemplo 4: Heran√ßa
```ruby
class Animal
  def initialize(nome)
    @nome = nome
  end

  def falar
    "Eu sou um animal."
  end
end

class Cachorro < Animal
  def falar
    "Au Au!"
  end
end

# Criando objetos
animal = Animal.new("Gen√©rico")
cachorro = Cachorro.new("Rex")

puts animal.falar  # Sa√≠da: Eu sou um animal.
puts cachorro.falar  # Sa√≠da: Au Au!
```

### Detalhes:
- **`Cachorro < Animal`** indica que a classe `Cachorro` herda de `Animal`. 
- A classe `Cachorro` pode sobrescrever o m√©todo `falar` para oferecer um comportamento diferente.

---

##  **Polimorfismo**
O **polimorfismo** permite que diferentes classes compartilhem o mesmo nome de m√©todo, mas com comportamentos diferentes. Isso √© poss√≠vel atrav√©s da heran√ßa e sobrescrita de m√©todos.

No exemplo anterior, o m√©todo `falar` foi polim√≥rfico, pois o comportamento do m√©todo foi diferente para o `Animal` e para o `Cachorro`.

---

##  **Encapsulamento**
O **encapsulamento** √© o conceito de ocultar os detalhes internos de uma classe e expor apenas o que √© necess√°rio para o uso externo. Em Ruby, isso √© feito principalmente usando **m√©todos de leitura e escrita** para acessar vari√°veis de inst√¢ncia.

### Exemplo 5: Encapsulamento
```ruby
class ContaBancaria
  def initialize(saldo)
    @saldo = saldo
  end

  def saldo
    @saldo
  end

  def depositar(valor)
    @saldo += valor
  end
end

conta = ContaBancaria.new(100)
conta.depositar(50)
puts conta.saldo  # Sa√≠da: 150
```

- **`@saldo`** √© uma vari√°vel de inst√¢ncia privada.
- O acesso a ela √© feito atrav√©s dos m√©todos `saldo` e `depositar`, garantindo que o saldo n√£o seja modificado diretamente fora da classe.

---

##  **Exerc√≠cio**
Agora, pratique criando suas pr√≥prias classes e objetos! üí™

1Ô∏è‚É£ Crie uma classe **Pessoa** com os atributos `nome` e `idade`. Implemente um m√©todo `falar` que retorna uma sauda√ß√£o usando o nome e a idade da pessoa.  

2Ô∏è‚É£ Crie uma classe **Produto** com os atributos `nome`, `pre√ßo` e `quantidade_em_estoque`. Implemente m√©todos para **adicionar** e **remover** unidades do produto no estoque, al√©m de um m√©todo para **calcular o valor total** do estoque (pre√ßo * quantidade).

---

**Se quiser, tente resolver e envie nos coment√°rios seus c√≥digos e suas respostas para analisarmos juntos!** üöÄ

**Pr√≥xima aula - [Desafio Final - Jogo das Luzes]({% link _posts/2025-03-17-jogo-das-luzes.markdown %})**