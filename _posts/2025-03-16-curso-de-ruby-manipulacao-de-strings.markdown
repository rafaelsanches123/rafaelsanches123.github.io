---
layout: post
title:  "Curso de Ruby - Manipula√ß√£o de Strings"
date:   2025-03-16 13:45:02 -0300
categories: ruby
---

![Ruby]({{ site.url }}/assets/ruby.png){:style="width: 100%" }

#  **Manipula√ß√£o de Strings**
As **strings** em Ruby s√£o muito poderosas e oferecem diversos m√©todos √∫teis para manipula√ß√£o de texto.

## **Criando Strings**
```ruby
str1 = "Ol√°, mundo!"
str2 = 'Ruby √© incr√≠vel!'
```

Podemos usar **interpola√ß√£o** para incluir vari√°veis dentro de strings **(somente com aspas duplas `" "`)**:

```ruby
nome = "Rafael"
puts "Ol√°, #{nome}!"  # ‚úÖ Funciona
puts 'Ol√°, #{nome}!'  # ‚ùå N√£o funciona (exibe #{nome} como texto)
```

 **Sa√≠da:**  
```
Ol√°, Rafael!
Ol√°, #{nome}!
```

---

## **M√©todos √öteis para Strings**
###  **Letras em Mai√∫sculas e Min√∫sculas**
```ruby
str = "Ruby √© incr√≠vel!"
# Toda a string fica em mai√∫scula
puts str.upcase   # "RUBY √â INCR√çVEL!"
# Toda a string fica em min√∫scula
puts str.downcase # "ruby √© incr√≠vel!" 
# A primeira letra fica em mai√∫scula
puts str.capitalize # "Ruby √© incr√≠vel!"
```

###  **Removendo Espa√ßos Extras**
```ruby
str = "   Ol√°, Ruby!   "
puts str.strip  # "Ol√°, Ruby!"
```

###  **Substituindo Caracteres**
```ruby
str = "Eu amo Java!"
puts str.gsub("Java", "Ruby")  # "Eu amo Ruby!"
```

###  **Dividindo Strings**
```ruby
frase = "Aprender Ruby √© divertido"
palavras = frase.split(" ")
puts palavras.inspect  # ["Aprender", "Ruby", "√©", "divertido"]
```

###  **Concatenando Strings**
```ruby
nome = "Rafael"
puts "Ol√°, " + nome + "!"      # Usando +
puts "Ol√°, #{nome}!"           # Usando interpola√ß√£o
puts ["Ol√°", nome, "!"].join(" ") # Usando join
```

###  **Saber o n√∫mero de caracteres da string**
```ruby
# use os m√©todos length ou size
"Ol√°".length  # => 3
```

###  **Inverter uma string**
```ruby
"ol√°".reverse  # => "√°lo"
```

###  **Verificar se a string cont√©m uma substring**
```ruby
substring = "l"
"ol√°".include?(substring)  # => true
```

---

# **Manipula√ß√£o de Arrays**
Os **arrays** em Ruby s√£o listas din√¢micas que podem armazenar qualquer tipo de dado.

## **Criando Arrays**
```ruby
numeros = [1, 2, 3, 4, 5]
nomes = ["Ana", "Jo√£o", "Carlos"]
```

Podemos acessar elementos pelo **√≠ndice (come√ßando em 0)**:
```ruby
puts nomes[0] # "Ana"
puts nomes[-1] # "Carlos" (√∫ltimo elemento)
```

---

## **M√©todos √öteis para Arrays**
###  **Adicionando Elementos**
```ruby
numeros << 6         # Adiciona 6 ao final
numeros.push(7)      # Outra forma de adicionar ao final
numeros.unshift(0)   # Adiciona 0 no in√≠cio
```
 **Resultado:** `[0, 1, 2, 3, 4, 5, 6, 7]`

---

###  **Removendo Elementos**
```ruby
numeros.pop      # Remove o √∫ltimo elemento
numeros.shift    # Remove o primeiro elemento
numeros.delete(3) # Remove todas as ocorr√™ncias do n√∫mero 3
```

---

###  **Iterando sobre Arrays**
Podemos percorrer um array com `.each`:
```ruby
numeros = [1, 2, 3, 4, 5]

numeros.each do |num|
  puts "N√∫mero: #{num}"
end
```
 **Sa√≠da:**
```
N√∫mero: 1
N√∫mero: 2
N√∫mero: 3
N√∫mero: 4
N√∫mero: 5
```

---

###  **Filtrando e Modificando Arrays**
```ruby
pares = numeros.select { |num| num.even? } # Apenas os n√∫meros pares
puts pares.inspect # [2, 4]

dobrados = numeros.map { |num| num * 2 } # Multiplica cada n√∫mero por 2
puts dobrados.inspect # [2, 4, 6, 8, 10]
```

Para conhecer outros m√©todos n√£o ensinados nesse post sobre manipula√ß√£o de strings voc√™ pode consultar [Documenta√ß√£o Oficial sobre Strings do Ruby](https://docs.ruby-lang.org/en/3.4/String.html)

---

#  **Exerc√≠cios**
Agora √© sua vez! üí™  

1Ô∏è‚É£ Crie um programa que pe√ßa ao usu√°rio para digitar uma **frase** e depois exiba a mesma frase, mas com **todas as letras mai√∫sculas**.  
2Ô∏è‚É£ Dado um array de n√∫meros `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`, exiba apenas os **n√∫meros pares**.  
3Ô∏è‚É£ Dado um array de palavras `["ruby", "√©", "muito", "legal"]`, transforme todas as palavras em **mai√∫sculas** e junte-as em uma √∫nica string separada por espa√ßo.  

**Se quiser, tente resolver e envie nos coment√°rios seus c√≥digos e suas respostas para analisarmos juntos!** üöÄ

**Pr√≥xima aula em constru√ß√£o!!! - Tratamento de Exce√ß√µes**